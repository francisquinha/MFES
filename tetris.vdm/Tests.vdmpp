class Tests

	types
		public String = seq of char;
		
	values
	-- TODO Define values here

	instance variables
		public matrix 		:map seq of nat to nat	:= {|->};
		public printBoard	:String					:= "";
		public endGame		:bool					:=false;
		
		
	operations
	
		------------------------------------------------------------ addPiece_test
		private addPiece_test: () ==> ()
		addPiece_test() ==
		(
			dcl game1: Game := new Game();
			IO`print("\n# addPiece_test\n");
						
			--inital matrix
				IO`print("\n-> Initial matrix\n");
			matrix:= game1.board.getBoard();
				IO`print(matrix);
			
			--print board	
			printBoard:= game1.board.getBoardPrint("init",[0,0],[0,0],[0,0],[0,0]);
				IO`print("\n\n" ^ printBoard);
					
			--add piece
				IO`print("-> Add piece on the matrix\n");
			game1.board.setPiece("set",[0,2],[1,2],[2,2],[3,2]);
			
			--get matrix after add piece
			matrix:= game1.board.getBoard();
				IO`print(matrix);
			
			--print board
			printBoard:= game1.board.getBoardPrint("set",[0,2],[1,2],[2,2],[3,2]);
				IO`print("\n\n" ^ printBoard);
		);       

		------------------------------------------------------------ timer_test
		private timer_test: () ==> ()
		timer_test() ==
		(
			dcl timer: Timer := new Timer();
			IO`print("\n# timer_test\n");
				
				while not endGame do (
				
					timer.incTimers();
					
					if (timer.getTimer("time") = 100000) then(
						IO`print("-> END \n");
						timer.resetTimer("all");
						endGame := true;
					);
					
					if(timer.getTimer("step") = 20000) then(
						IO`print("-> Matrix \n");
						timer.resetTimer("step");
					);					
				);
		);


		------------------------------------------------------------ MAIN TESTS
		public static main: () ==> ()
		main() ==
		(
			IO`print("\nINIT TESTS\n");
		  	new Tests().addPiece_test();
		  	new Tests().timer_test();
		  	
		);

	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here

end Tests
