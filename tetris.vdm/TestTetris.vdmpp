class TestTetris is subclass of TestCaseExtra

	types
		public String = seq of char;

	instance variables
		public matrix 		:map seq of nat to nat	:= {|->};
		public printBoard	:String					:= "";
		public endGame		:bool					:=false;
		
		public movePiece	:bool					:=true;
		
	operations
		------------------------------------------------------------ addPiece_test
		private addPiece_test: () ==> ()
		addPiece_test() ==(
		
			dcl game1: Game := new Game();
			IO`println("# Test 1 - Add random piece; move the piece manually/automatically\n");
						
			--inital matrix
			IO`println("-> Initial matrix");
			matrix:= game1.board.getBoard();
			IO`println(matrix);
			
			--print board	
			printBoard:= game1.board.getBoardPrint();
			IO`println(printBoard);
					
			--add piece
			IO`println("-> Add piece on the matrix");
			game1.board.cell_setPiece("set",[0,2],[1,2],[2,2],[3,2]);
			
			--get matrix after add piece
			matrix:= game1.board.getBoard();
			IO`println(matrix);
			
			--print board
			printBoard:= game1.board.getBoardPrint();
			IO`println(printBoard);
				
			--automaticallyMovePiece
			IO`println("-> Move piece automatically");
			movePiece:= game1.board.cell_automaticallyMovePiece();
	
			--get matrix after add piece
			matrix:= game1.board.getBoard();
			IO`println(matrix);
				
			--print board
			printBoard:= game1.board.getBoardPrint();
			IO`println(printBoard);
				
			--automaticallyMovePiece
			IO`println("-> Move piece automatically (second call)");
			movePiece:= game1.board.cell_automaticallyMovePiece();
	
			--get matrix after add piece
			matrix:= game1.board.getBoard();
			IO`println(matrix);
				
			--print board
			printBoard:= game1.board.getBoardPrint();
			IO`println(printBoard);
				
			--manually
			IO`println("-> Move piece manually (keyboard click simulation)");
			game1.board.cell_manuallyMovePiece("moveRight", 8);
	
			--get matrix after add piece
			matrix:= game1.board.getBoard();
			IO`println(matrix);
				
			--print board
			printBoard:= game1.board.getBoardPrint();
			IO`println(printBoard);
		);       

		------------------------------------------------------------ timer_test
		private timer_test: () ==> ()
		timer_test() ==(
		
			dcl timer: Timer := new Timer();
			IO`print("\n# timer_test\n");
				
				while not endGame do (
				
					timer.incTimers();
					
					if (timer.getTimer("time") = 100000) then(
						IO`print("-> END \n");
						timer.resetTimer("all");
						endGame := true;
					);
					
					if(timer.getTimer("step") = 20000) then(
						IO`print("-> Matrix \n");
						timer.resetTimer("step");
					);					
				);
		);
		
		------------------------------------------------------------ MAIN TESTS
		public static main: () ==> ()
		main() ==(
		
			IO`print("\n##### TESTS #####\n");
		  	new TestTetris().addPiece_test();
		  	--new Tests().timer_test();  	
		);
		
end TestTetris
