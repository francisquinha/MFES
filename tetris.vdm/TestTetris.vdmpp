class TestTetris is subclass of TestCaseExtra

	instance variables
	
		private printBoard	: Game`String	:= "";
			

	operations
	
		private print_test: (Game) ==> ()
		print_test(game) == (
			printBoard := game.printBoard(true, true, true);
		);
	
		------------------------------------------------------------ initalMatrix_test
		private initalMatrix_test: (Game) ==> ()
		initalMatrix_test(game) == (
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕          ▏" ^
				"\n▕          ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		); 
			

		------------------------------------------------------------ addTetramino_tests
		private addTetramino1_test: Game ==> ()
		addTetramino1_test(game) == (		
			game.newTetramino(1);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕          ▏" ^
				"\n▕   ████   ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino2_test: Game ==> ()
		addTetramino2_test(game) == (		
			game.newTetramino(2);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕   █      ▏" ^
				"\n▕   ███    ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░████░░░▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino3_test: Game ==> ()
		addTetramino3_test(game) == (		
			game.newTetramino(3);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕     █    ▏" ^
				"\n▕   ███    ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕█░░░░░░░░░▏" ^
				"\n▕███████░░░▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino4_test: Game ==> ()
		addTetramino4_test(game) == (		
			game.newTetramino(4);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕    ██    ▏" ^
				"\n▕    ██    ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕█░░░░░░░░█▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino5_test: Game ==> ()
		addTetramino5_test(game) == (		
			game.newTetramino(5);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕    ██    ▏" ^
				"\n▕   ██     ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░██░░░░▏" ^
				"\n▕█░░░██░░░█▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino6_test: Game ==> ()
		addTetramino6_test(game) == (		
			game.newTetramino(6);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕    █     ▏" ^
				"\n▕   ███    ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░██░░██▏" ^
				"\n▕█░░░██░███▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino7_test: Game ==> ()
		addTetramino7_test(game) == (		
			game.newTetramino(7);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕   ██     ▏" ^
				"\n▕    ██    ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░█░░░▏" ^
				"\n▕░░░░██████▏" ^
				"\n▕█░░░██████▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		private addTetramino8_test: Game ==> ()
		addTetramino8_test(game) == (		
			game.newTetramino(5);
			printBoard := game.printBoard(true, true, true);
			assertEqual(printBoard, 
				"\n▕    ██    ▏" ^
				"\n▕   ██     ▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░░░░░▏" ^
				"\n▕░░░░░░█░░░▏" ^
				"\n▕██░░██████▏" ^
				"\n▕███░██████▏" ^
				"\n ▔▔▔▔▔▔▔▔▔▔")
		);
		
		------------------------------------------------------------ moveTetramino_tests		
		private moveTetramino1_test: Game ==> ()
		moveTetramino1_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 18);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino2_test: Game ==> ()
		moveTetramino2_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 36);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino3_test: Game ==> ()
		moveTetramino3_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 54);
			assertEqual(game.checkLines(), 1);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 154);
		);
		private moveTetramino4_test: Game ==> ()
		moveTetramino4_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 172);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino5_test: Game ==> ()
		moveTetramino5_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 190);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino6_test: Game ==> ()
		moveTetramino6_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.right());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 17);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 207);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino7_test: Game ==> ()
		moveTetramino7_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 18);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 225);
			assertEqual(game.checkLines(), 0);
		);
		private moveTetramino8_test: Game ==> ()
		moveTetramino8_test(game) == (
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.down());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.rotate());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertTrue(game.left());
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.drop(), 17);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 242);
			assertEqual(game.checkLines(), 2);
			printBoard := game.printBoard(true, true, true);
			assertEqual(game.getScore(), 542);
		);

		------------------------------------------------------------ play_test		
		private play_test: Game ==> ()
		play_test(game) == (
			dcl column: nat := 0;
			for i = 1 to 40 do (
				game.newTetramino(1);
				assertTrue(game.down());
				printBoard := game.printBoard(true, true, true);
				assertTrue(game.down());
				printBoard := game.printBoard(true, true, true);
				assertTrue(game.rotate());
				printBoard := game.printBoard(true, true, true);
				while game.left() do
					printBoard := game.printBoard(true, true, true);
				for j = 1 to column do
					if game.right() then
						printBoard := game.printBoard(true, true, true);
				if column = 2 or column = 6 then assertEqual(game.drop(), 15)
				else assertEqual(game.drop(), 16);
				printBoard := game.printBoard(true, true, true);
				if column = 9 then (
					assertEqual(game.checkLines(), 4);
					printBoard := game.printBoard(true, true, true)
				)
				else assertEqual(game.checkLines(), 0);
				column := (column + 1) mod 10;
				if i = 20 then (
					assertEqual(game.getLines(), 11);
					assertEqual(game.getLevel(), 2);
					assertEqual(game.getScore(), 542 + 16 * 16 + 15 * 4 + 800 * 2);
				)
			);
			assertEqual(game.getLines(), 19);
			assertEqual(game.getLevel(), 2);
			assertEqual(game.getScore(), 2458 + 16 * 16 * 2 + 15 * 4 * 2 + 800 * 2 * 2);
		);
			
		

		------------------------------------------------------------ MAIN TESTS
		public static main: () ==> ()
		main() == (
		
			dcl game: Game := new Game();
		
			IO`print("\n##### TESTS #####\n");
			
			new TestTetris().initalMatrix_test(game);
			new TestTetris().addTetramino1_test(game);
			new TestTetris().moveTetramino1_test(game);
			new TestTetris().addTetramino2_test(game);
			new TestTetris().moveTetramino2_test(game);
			new TestTetris().addTetramino3_test(game);
			new TestTetris().moveTetramino3_test(game);
			new TestTetris().addTetramino4_test(game);
			new TestTetris().moveTetramino4_test(game);
			new TestTetris().addTetramino5_test(game);
			new TestTetris().moveTetramino5_test(game);
			new TestTetris().addTetramino6_test(game);
			new TestTetris().moveTetramino6_test(game);
			new TestTetris().addTetramino7_test(game);
			new TestTetris().moveTetramino7_test(game);
			new TestTetris().addTetramino8_test(game);
			new TestTetris().moveTetramino8_test(game);
			new TestTetris().play_test(game);
		);
		
end TestTetris
