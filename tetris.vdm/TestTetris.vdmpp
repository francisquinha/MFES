class TestTetris is subclass of TestCaseExtra

	instance variables
		public printBoard	: Game`String	:= "";
		
	operations
		------------------------------------------------------------ initalMatrix_test
		private initalMatrix_test: (Game) ==> ()
		initalMatrix_test(game) ==(
			--print board	
			printBoard := game.printBoard(true, true, true);
		); 
			
		------------------------------------------------------------ addTetramino_test
		private addTetramino_test: Game * nat ==> ()
		addTetramino_test(game, id) == (		
			game.newTetramino(id);
			--print board
			printBoard := game.printBoard(true, true, true);
		);
		
		------------------------------------------------------------ dropTetramino_test
		private dropTetramino_test:	Game ==> ()
		dropTetramino_test(game) == (	
			dcl value : nat := game.drop();
			if value > 0 then (
				--print board
				printBoard := game.printBoard(true, true, true);
			--	IO`println(value);
				IO`println(game.getScore());
				IO`println(game.getLines());
				IO`println(game.getLevel());
			)
		);
		
		------------------------------------------------------------ downTetramino_test
		private downTetramino_test:	Game ==> ()
		downTetramino_test(game) == (		
			dcl result : bool := game.down();
			--print board
			printBoard := game.printBoard(true, true, true);
			--IO`println(result);
		);

		------------------------------------------------------------ rightTetramino_test
		private rightTetramino_test: Game ==> ()
		rightTetramino_test(game) == (		
			dcl result : bool := game.right();
			--print board
			printBoard := game.printBoard(true, true, true);
			--IO`println(result);
		);

		------------------------------------------------------------ leftTetramino_test
		private leftTetramino_test: Game ==> ()
		leftTetramino_test(game) == (		
			dcl result : bool := game.left();
			--print board
			printBoard := game.printBoard(true, true, true);
			--IO`println(result);
		);
		
		------------------------------------------------------------ rotateTetramino_test
		private rotateTetramino_test: Game ==> ()
		rotateTetramino_test(game) == (		
			dcl result : bool := game.rotate();
			--print board
			printBoard := game.printBoard(true, true, true);
			--IO`println(result);
		);
				
		------------------------------------------------------------ checkLines_test
		private checkLines_test: Game ==> ()
		checkLines_test(game) == (		
			dcl value : nat := game.checkLines();
			if value > 0 then (
				--print board
				printBoard := game.printBoard(true, true, true);
				--IO`println(value);
				IO`println(game.getScore());
				IO`println(game.getLines());
				IO`println(game.getLevel());
			)
		);

		------------------------------------------------------------ addRandomTetramino_test
		private addRandomTetramino_test: Game ==> ()
		addRandomTetramino_test(game) == (	
			game.newRandomTetramino();
			--print board
			printBoard := game.printBoard(true, true, true);
		);

		------------------------------------------------------------ MAIN TESTS
		public static main: () ==> ()
		main() == (
		
			dcl game: Game := new Game();
			dcl testInt : nat := 0;
		
			IO`print("\n##### TESTS #####\n");
			
			new TestTetris().initalMatrix_test(game);
			new TestTetris().addTetramino_test(game, 1);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 2);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 3);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 4);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 5);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 6);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().rightTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 7);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
			new TestTetris().addTetramino_test(game, 5);
			new TestTetris().downTetramino_test(game);
			new TestTetris().downTetramino_test(game);
			new TestTetris().rotateTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().leftTetramino_test(game);
			new TestTetris().dropTetramino_test(game);
--			new TestTetris().checkLines_test(game);
/*			while not game.getGameOver() do (
				new TestTetris().addRandomTetramino_test(game);
				if testInt = 0 then (
					new TestTetris().leftTetramino_test(game);
					new TestTetris().leftTetramino_test(game);
					new TestTetris().leftTetramino_test(game)
				)
				else if testInt = 2 then (
					new TestTetris().rightTetramino_test(game);
					new TestTetris().rightTetramino_test(game);
					new TestTetris().rightTetramino_test(game);		
					new TestTetris().rightTetramino_test(game);		
				);
				new TestTetris().dropTetramino_test(game);
				new TestTetris().checkLines_test(game);
				testInt := (testInt + 1) mod 3;
			)*/
		);
		
end TestTetris
