class TestTetris is subclass of TestCaseExtra

	instance variables
		public matrix 		:Board`Matrix	:= {|->};
		public printBoard	:Board`String	:= "";
		
	operations
		------------------------------------------------------------ initalMatrix_test
		private initalMatrix_test: (Game) ==> ()
		initalMatrix_test(game) ==(
		
--			IO`println("-> Initial matrix");
--			matrix := game.board.getBoard("printMatrix");
			
			--print board	
			printBoard := game.board.getBoardPrint("printBoard");
		); 
	
		------------------------------------------------------------ addPiece_test
		private addPiece_test:	Game * 
							  	Board`Position * Board`Position *
							  	Board`Position * Board`Position ==> ()
		addPiece_test(game, coord1, coord2, coord3, coord4) ==(		
			
			IO`println("-> Add piece on the matrix");
			game.board.cell_setPiece("set",coord1,coord2,coord3,coord4);
	
			--get matrix after add piece
			matrix := game.board.getBoard("printMatrix" );
			
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
		);
		
		------------------------------------------------------------ automaticallyMovePiece_test
		private automaticallyMovePiece_test: Game * nat * nat ==> ()
		automaticallyMovePiece_test(game, totalTime, step) ==(
		
			dcl timer		:Timer	:= new Timer();
			dcl endLoop		:bool	:= false;	
			dcl movePiece	:bool	:= true;
					
			IO`println("-> Move piece automatically (dummy timer)");
			
			while not endLoop do (
			
				timer.incTimers();
				
				if (timer.getTimer("time") = 180000 * totalTime ) then(
					timer.resetTimer("all");
					endLoop := true;
				);
				
				if(timer.getTimer("step") = 4000 * step) then(
					
					movePiece:= game.board.cell_automaticallyMovePiece();
			
					--get matrix after automaticallyMove
					matrix:= game.board.getBoard("printMatrix");		
					--print board
					printBoard:= game.board.getBoardPrint("printBoard");
				
					timer.resetTimer("step");
				);					
			);
		);
		
		------------------------------------------------------------ manuallyMovePiece_test
		private manuallyMovePiece_test: Game * Board`String * nat ==> ()
		manuallyMovePiece_test(game, move, numberOfClicks) ==(
			
			IO`println("-> Move piece manually (keyboard click simulation)");
			game.board.cell_manuallyMovePiece(move, numberOfClicks);
	
			--get matrix after manually move piece
			matrix:= game.board.getBoard("printMatrix");
				
			--print board
			printBoard:= game.board.getBoardPrint("printBoard");					
		);
				
				------------------------------------------------------------ addTetramino_test
		private addTetramino_test: Game * nat ==> Tetramino
		addTetramino_test(game, id) == (		
			dcl tetramino : Tetramino;
			cases id:
				1 -> tetramino := new TetraminoI(game.board),
				2 -> tetramino := new TetraminoJ(game.board),
				3 -> tetramino := new TetraminoL(game.board),
				4 -> tetramino := new TetraminoO(game.board),
				5 -> tetramino := new TetraminoS(game.board),
				6 -> tetramino := new TetraminoT(game.board),
				7 -> tetramino := new TetraminoZ(game.board)
			end;
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			return tetramino;
		);
		
				------------------------------------------------------------ dropTetramino_test
		private dropTetramino_test:	Game * Tetramino ==> ()
		dropTetramino_test(game, tetramino) == (		
			dcl value : nat := tetramino.drop(game.board);
			if value > 0 then (
				--print board
				printBoard := game.board.getBoardPrint("printBoard");
			--	IO`println(value);
			)
		);
		
				------------------------------------------------------------ downTetramino_test
		private downTetramino_test:	Game * Tetramino ==> ()
		downTetramino_test(game, tetramino) == (		
			dcl result : bool := tetramino.moveDown(game.board);
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			--IO`println(result);
		);

				------------------------------------------------------------ rightTetramino_test
		private rightTetramino_test: Game * Tetramino ==> ()
		rightTetramino_test(game, tetramino) == (		
			dcl result : bool := tetramino.moveRight(game.board);
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			--IO`println(result);
		);

				------------------------------------------------------------ leftTetramino_test
		private leftTetramino_test: Game * Tetramino ==> ()
		leftTetramino_test(game, tetramino) == (		
			dcl result : bool := tetramino.moveLeft(game.board);
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			--IO`println(result);
		);
		
				------------------------------------------------------------ rotateTetramino_test
		private rotateTetramino_test: Game * Tetramino ==> ()
		rotateTetramino_test(game, tetramino) == (		
			dcl result : bool := tetramino.rotate(game.board);
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			--IO`println(result);
		);
				
				------------------------------------------------------------ checkRows_test
		private checkRows_test: Game ==> ()
		checkRows_test(game) == (		
			dcl value : nat := game.board.checkRows();
			if value > 0 then (
				--print board
				printBoard := game.board.getBoardPrint("printBoard");
				--IO`println(value);
			)
		);

				------------------------------------------------------------ addRandomTetramino_test
		private addRandomTetramino_test: Game ==> Tetramino
		addRandomTetramino_test(game) == (	
			dcl tetramino : Tetramino := game.board.addTetramino();
			--print board
			printBoard := game.board.getBoardPrint("printBoard");
			return tetramino;
		);

		------------------------------------------------------------ MAIN TESTS
		public static main: () ==> ()
		main() ==(
		
			dcl game: Game := new Game();
			dcl tetramino: Tetramino;
			dcl testInt : nat := 0;
		
			IO`print("\n##### TESTS #####\n");
			
			new TestTetris().initalMatrix_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 1);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 2);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 3);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 4);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 5);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 6);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().rightTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 7);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			tetramino := new TestTetris().addTetramino_test(game, 5);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().downTetramino_test(game, tetramino);
			new TestTetris().rotateTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().leftTetramino_test(game, tetramino);
			new TestTetris().dropTetramino_test(game, tetramino);
			new TestTetris().checkRows_test(game);
			while not game.board.getGameOver() do (
				tetramino := new TestTetris().addRandomTetramino_test(game);
				if testInt = 0 then (
					new TestTetris().leftTetramino_test(game, tetramino);
					new TestTetris().leftTetramino_test(game, tetramino);
					new TestTetris().leftTetramino_test(game, tetramino)
				)
				else if testInt = 2 then (
					new TestTetris().rightTetramino_test(game, tetramino);
					new TestTetris().rightTetramino_test(game, tetramino);
					new TestTetris().rightTetramino_test(game, tetramino);		
					new TestTetris().rightTetramino_test(game, tetramino);		
				);
				new TestTetris().dropTetramino_test(game, tetramino);
				new TestTetris().checkRows_test(game);
				testInt := (testInt + 1) mod 3;
			)
			
/**			IO`println("# Test 1 - Add random piece; move the piece manually/automatically\n");
			new TestTetris().initalMatrix_test(game);
		  	new TestTetris().addPiece_test(game, [1,3],[1,4],[1,5],[1,6]);
		   	new TestTetris().automaticallyMovePiece_test(game,1,4);	
		   	new TestTetris().manuallyMovePiece_test(game, "moveRight", 2);
		  	new TestTetris().automaticallyMovePiece_test(game,1,2);
		  	new TestTetris().addPiece_test(game, [0,4],[1,4],[1,5],[1,6]);
		   	new TestTetris().automaticallyMovePiece_test(game,1,2);	
		  	new TestTetris().addPiece_test(game, [1,4],[1,5],[0,5],[0,6]);
		  	new TestTetris().automaticallyMovePiece_test(game,1,4);	
		  	new TestTetris().manuallyMovePiece_test(game, "moveLeft", 4);
		   	new TestTetris().automaticallyMovePiece_test(game,1,2);**/
		  	
		  	--TODO: Add more tests
		);
		
end TestTetris
