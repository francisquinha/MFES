class Board
		
	instance variables
		private print_startTag		:TestCaseExtra`String	:="▕";
		private print_endTag		:TestCaseExtra`String	:="▏\n";
		private print_bottomLine	:TestCaseExtra`String	:=" ▔▔▔▔▔▔▔▔▔▔▔▔";
		private print_emptyCell		:TestCaseExtra`String	:="░";
	  	private print_filledcell	:TestCaseExtra`String	:="█";
		private print_board			:TestCaseExtra`String	:= "";
		
		private totalRows			:nat 					:= 20;
		private totalColumns		:nat 					:= 10;
		private iterator			:nat					:= 0;
		
		private matrix 				:TestCaseExtra`t_matrix	:= {|->};
		private tempMatrix			:TestCaseExtra`t_matrix	:= {|->};
		
		private emptyCell			:nat					:=0;
		private blockedCell			:nat					:=1;
				
		private pieceI				:nat					:=111;
		private pieceO				:nat					:=222;
		private pieceT				:nat					:=333;
		private pieceJ				:nat					:=444;
		private pieceL				:nat					:=555;
		private pieceS				:nat					:=666;
		private pieceZ				:nat					:=777;
							
	operations
		------------------------------------------------------------ Board
		public Board : () ==> Board
		Board() ==(	
			self.initBoard("matrix");
			tempMatrix := matrix; 
		);
		
		------------------------------------------------------------ initBoard
		public  initBoard : (TestCaseExtra`String) ==> ()
		initBoard(option) ==(		

			if(option = "matrix") then(
				for i=0 to totalRows do( 
					for j=0 to totalColumns do (
						matrix := matrix ++ {[i,j] |-> 0 };
					);
				);
			)	
			elseif (option = "tempMatrix") then(
				for i=0 to totalRows do( 
					for j=0 to totalColumns do (
						if (matrix([i,j]) <>  blockedCell ) then
							tempMatrix := tempMatrix ++ {[i,j] |-> 0 };
					);
				);	
			);		
		);
		--post len row1 =12;
		--pre len matrix <=0

		------------------------------------------------------------ printBoard
		public getBoardPrint : (TestCaseExtra`String) ==> TestCaseExtra`String
		getBoardPrint(option) ==(	

			print_board	:= "\n";
								
			for i=0 to totalRows do(
				print_board := print_board ^ print_startTag;
	  			for j=0 to totalColumns do (
	  			
	  				if (matrix([i,j]) = pieceI or matrix([i,j]) = blockedCell ) then
	  					print_board := print_board ^ print_filledcell
	  					
	  				else
	  					print_board := print_board ^ print_emptyCell;
	  			);
	  			print_board := print_board ^  print_endTag;
	  		);
	  		
	  		if (option = "printBoard") then
	  			IO`println(print_board ^ print_bottomLine);
	  		
	 		return print_board ^ print_bottomLine ;	  							  							
		);
		
		------------------------------------------------------------ get matrix board
		public  getBoard : (TestCaseExtra`String)  ==> TestCaseExtra`t_matrix
		getBoard(option) ==(
			
			if (option = "printMatrix" ) then
	  			IO`println(self.matrix);
		
			return self.matrix;
		);
		
		------------------------------------------------------------ cell_setPiece
		public cell_setPiece : 	TestCaseExtra`String  * 
								TestCaseExtra`t_coord * TestCaseExtra`t_coord * 
								TestCaseExtra`t_coord * TestCaseExtra`t_coord ==> ()
		cell_setPiece(option, coord1, coord2, coord3, coord4) ==(
		
			dcl cell: Cell := new Cell();
			self.checkBoard();	
			
			matrix:= cell.setPiece(option, coord1, coord2, coord3, coord4, matrix)
		);

		------------------------------------------------------------ checkBoard
		public 	checkBoard : () ==> ()
				checkBoard() ==(
			
			dcl block	:bool	:= false;	
										
			for i=0 to totalRows do(
	  			for j=0 to totalColumns do (
	  			
	  				if ( (matrix([i,j]) = pieceI and matrix([totalRows,j]) = pieceI) or
	  					 (matrix([i,j]) = pieceI and matrix([i+1,j]) = blockedCell) ) then
						block:= true;
	  			);
	  		);
	  			  		
	  		if(block = true) then(
				for i=0 to totalRows do( 
					for j=0 to totalColumns do (
						if (matrix([i,j]) = pieceI) then
		  					matrix([i,j]) := blockedCell;
					);
				);
			tempMatrix := matrix; 
			);	
		);
				
		------------------------------------------------------------ cell_automaticallyMovePiece
		public cell_automaticallyMovePiece : () ==> bool
		cell_automaticallyMovePiece() ==(
				
			dcl cell		:Cell 	:= new Cell();
			self.checkBoard();	
			-- check if mino is on the last row				
			-- TODO: dynamic board ( call cell_setPiece(...) )
			-- TODO: draw new Mino (add piece on the matrix with the values |-> 1
			
			self.initBoard("tempMatrix");
			matrix := cell.automaticallyMovePiece(tempMatrix, matrix);
			
			return true;  					
		);
		
		------------------------------------------------------------ cell_manuallyMovePiece
		public cell_manuallyMovePiece : TestCaseExtra`String * nat ==> ()
		cell_manuallyMovePiece(option, numberOfClicks) ==(		
			dcl cell: Cell := new Cell();
			
			self.initBoard("tempMatrix");
			matrix := cell.manuallyMovePiece(option, numberOfClicks, tempMatrix, matrix);  					
		);
		
		------------------------------------------------------------ checkRow
		public  checkRow : int ==> bool
			checkRow(row) ==
			is not yet specified;

end Board