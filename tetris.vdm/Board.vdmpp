class Board
	
	types
		public String 	= seq of char;
		public t_matrix	= map seq of nat to nat;
		public t_coord	= seq of nat;
		
	instance variables
		private print_startTag		:String		:="▕";
		private print_endTag		:String		:="▏\n";
		private print_bottomLine	:String		:=" ▔▔▔▔▔▔▔▔▔▔▔▔";
		private print_emptyCell		:String		:="░";
	  	private print_filledcell	:String		:="█";
		private print_board			:String		:= "";
		
		private totalRows			:nat 		:= 11;
		private totalColumns		:nat 		:= 11;
		private iterator			:nat		:= 0;
		
		private matrix 				:t_matrix	:= {|->};
		private tempMatrix			:t_matrix	:= {|->};
		
		private emptyCell			:nat		:=0;
		private forMoveCell			:nat		:=1;
		private filledCell			:nat		:=2;
		private tempCell			:nat		:=9;
				
	operations
		------------------------------------------------------------ Board
		public Board : () ==> Board
		Board() ==(	
			self.initBoard("matrix");
		);
		
		------------------------------------------------------------ initBoard
		public  initBoard : (String) ==> ()
		initBoard(option) ==(		
					
			(if(option = "matrix") then
				for x=0 to totalRows do( 
					for y=0 to totalColumns do (
						matrix := matrix ++ {[x,y] |-> 0 };
					);
				)	
			elseif (option = "tempMatrix") then
				for x=0 to totalRows do( 
					for y=0 to totalColumns do (
						tempMatrix := tempMatrix ++ {[x,y] |-> 0 };
					);
				)	
			);		
		);
		--post len row1 =12;
		--pre len matrix <=0

		------------------------------------------------------------ printBoard
		public getBoardPrint : () ==> String
		getBoardPrint() ==(	

			print_board	:= "\n";
								
			for i=0 to totalRows do(
				print_board := print_board ^ print_startTag;
	  			for j=0 to totalColumns do (
	  			
	  				if (matrix([i,j]) = forMoveCell or matrix([i,j]) = filledCell ) then
	  					print_board := print_board ^ print_filledcell
	  					
	  				else
	  					print_board := print_board ^ print_emptyCell;
	  			);
	  			print_board := print_board ^  print_endTag;
	  		);
	 		return print_board ^ print_bottomLine ;	  							  							
		);
		
		------------------------------------------------------------ get matrix board
		public  getBoard : ()  ==> map seq of nat to nat
		getBoard() ==(	
			return self.matrix;
		);
		
		------------------------------------------------------------ cell_setPiece
		public cell_setPiece : String * t_coord * t_coord * t_coord * t_coord ==> ()
		cell_setPiece(option, coord1, coord2, coord3, coord4) ==(
		
			dcl cell: Cell := new Cell();
			matrix:= cell.setPiece(option, coord1, coord2, coord3, coord4, matrix)
		);

		------------------------------------------------------------ cell_automaticallyMovePiece
		public cell_automaticallyMovePiece : () ==> bool
		cell_automaticallyMovePiece() ==(		
			dcl cell: Cell := new Cell();
			
			-- TODO: check if is on the last row
			-- TODO: dynamic row
			
			self.initBoard("tempMatrix");
			matrix := cell.automaticallyMovePiece(tempMatrix, matrix);
			
			return true;  					
		);
		
		------------------------------------------------------------ cell_manuallyMovePiece
		public cell_manuallyMovePiece : String * nat ==> ()
		cell_manuallyMovePiece(option, numberOfClicks) ==(		
			dcl cell: Cell := new Cell();

			self.initBoard("tempMatrix");
			matrix := cell.manuallyMovePiece(option, numberOfClicks, tempMatrix, matrix);  					
		);
		
		------------------------------------------------------------ checkRow
		public  checkRow : int ==> bool
			checkRow(row) ==
			is not yet specified;

end Board