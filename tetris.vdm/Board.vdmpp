class Board
	
	types
		public String = seq of char;
		
	instance variables
		private print_startTag		:String					:="<!";
		private print_endTag		:String					:="!>\n";
		private print_bottomLine	:String					:="============";
		private print_emptyCell		:String					:="□";
	  	private print_filledcell	:String					:="■";
		private print_board			:String					:= "";
		
		private totalRows			:nat 					:= 11;
		private totalColumns		:nat 					:= 11;
		private iterator			:nat					:= 0;
		
		private matrix 				:map seq of nat to nat	:= {|->};
		private tempMatrix			:map seq of nat to nat	:= {|->};
		
		private emptyCell			:nat					:=0;
		private forMoveCell			:nat					:=1;
		private filledCell			:nat					:=2;
		private tempCell			:nat					:=9;
		
		
		private pieceOperation		:nat					:=0;
		
	operations
		------------------------------------------------------------ Board
		public Board : () ==> Board
		Board() ==(	
			self.initBoard("matrix");
		);
		
		------------------------------------------------------------ initBoard
		public  initBoard : (String) ==> ()
		initBoard(option) ==(		
					
			(if(option = "matrix") then
				for x=0 to 11 do( 
					for y=0 to 11 do (
						matrix := matrix ++ {[x,y] |-> 0 };
					);
				)	
			elseif (option = "tempMatrix") then
				for x=0 to 11 do( 
					for y=0 to 11 do (
						tempMatrix := tempMatrix ++ {[x,y] |-> 0 };
					);
				)	
			);		
		);
		--pre len matrix <=0
		--post len row1 =12;
		
		------------------------------------------------------------ printBoard
		public getBoardPrint : () ==> String
		getBoardPrint() ==(	

			print_board	:= "";
								
			for i=0 to totalRows do(
				print_board := print_board ^ print_startTag;
	  			for j=0 to totalColumns do (
	  			
	  				if (matrix([i,j]) = forMoveCell or
	  					matrix([i,j]) = filledCell ) then
	  					 
	  					print_board := print_board ^ print_filledcell
	  				else
	  					print_board := print_board ^ print_emptyCell;
	  			);
	  			print_board := print_board ^  print_endTag;
	  		);
	 		return print_board ^ print_startTag ^ print_bottomLine ^ print_endTag;	  							  							
		);
		
		------------------------------------------------------------ get matrix board
		public  getBoard : ()  ==> map seq of nat to nat
		getBoard() ==(	
			return self.matrix;
		);
		
		------------------------------------------------------------ set and remove piece
		public setPiece : String * seq of nat * seq of nat * seq of nat * seq of nat ==> ()
		setPiece(option, coord1, coord2, coord3, coord4) ==(
		
			(if(option = "set") then
				pieceOperation := forMoveCell
			elseif (option = "remove") then
				pieceOperation := emptyCell
			);
			
			matrix := matrix ++ {coord1 |-> pieceOperation};
			matrix := matrix ++ {coord2 |-> pieceOperation};
			matrix := matrix ++ {coord3 |-> pieceOperation};
			matrix := matrix ++ {coord4 |-> pieceOperation};
		);

		------------------------------------------------------------ getPiece
		public automaticallyMovePiece : () ==> ()
		automaticallyMovePiece() ==(
		
			self.initBoard("tempMatrix");
  		
				-- move piece
				for i=0 to totalRows do(
		  			for j=0 to totalColumns do (
	  				  	 				  		  				  	
						if (matrix([i,j]) = forMoveCell) then(
							tempMatrix([i+1,j]) := forMoveCell;
						);		
	  				);  			
		  		);  		
				-- remove temp
		  		matrix:= tempMatrix;
		);
		
		------------------------------------------------------------ getPiece
		public  getPiece : ()  ==> int
			getPiece() ==
			is not yet specified;
		
		------------------------------------------------------------ checkRow
		public  checkRow : int ==> bool
			checkRow(row) ==
			is not yet specified;

end Board